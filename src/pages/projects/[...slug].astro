---
import "@/styles/globals.css";
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { ImageDialog } from "@/components/ImageDialog";
import { Button } from "@/components/ui/button";

export const prerender = true;

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("project");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();
---

<Layout title={`Andy Leong | ${entry.data.title}`}>
  <div class="max-w-[60vw] mx-auto px-4">
    <div class="text-center">
      <h1 class="md:text-3xl text-xl font-bold">{entry.data.title}</h1>
      <p class="text-gray-400">
        {new Date(entry.data.timestamp).toDateString()}
      </p>
      <div class="flex gap-2 mt-3 flex-wrap justify-center">
        {
          entry.data.tags.map((tag: string) => {
            return (
              <span class="rounded-md px-2 py-1 text-xs font-semibold border border-terminal-green items-center flex justify-center shadow-lg whitespace-nowrap">
                {tag}
              </span>
            );
          })
        }
      </div>
    </div>

    <div class="mt-8">
      {
        entry.data.images && (
          <ImageDialog
            title={entry.data.title}
            images={entry.data.images}
            client:load
          />
        )
      }
      <div class="mt-8 flex flex-wrap">
        {
          entry.data.demoLink && (
            <Button variant="default" size="sm" className="mr-2 mb-2">
              <a
                href={entry.data.demoLink}
                target="_blank"
                rel="noopener noreferrer"
              >
                Link to Demo
              </a>
            </Button>
          )
        }
        {
          entry.data.codeLink && (
            <Button variant="outline" size="sm" className="mr-2 mb-2">
              <a
                href={entry.data.codeLink}
                target="_blank"
                rel="noopener noreferrer"
              >
                <div class="flex items-center">
                  <img
                    src="/images/github-icon.svg"
                    alt="github logo"
                    class="w-6 h-6 github-icon mr-3"
                  />
                  Link to Code
                </div>
              </a>
            </Button>
          )
        }
        <div class="mt-6 prose w-full max-w-full">
          <div class="markdown-content">
            <Content />
          </div>
        </div>
        <div class="mt-8 text-center">
          <a
            href="/projects"
            class="text-white px-2 py-2 border border-slate-400 rounded-md flex items-center justify-center hover:bg-slate-400 transition duration-150 ease-in-out hover:text-black w-fit mx-auto"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="w-4 h-4 mr-2"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18"></path>
            </svg>
            Back
          </a>
        </div>
      </div>
    </div>
    <style>
      .github-icon {
        filter: invert(100%) sepia(0%) saturate(0%) hue-rotate(327deg)
          brightness(109%) contrast(103%);
      }
    </style>
  </div>
</Layout>

<style>
  .markdown-content :global(h1) {
    @apply text-2xl font-bold mb-4;
  }

  .markdown-content :global(h2) {
    @apply text-xl font-bold mb-3;
  }

  .markdown-content :global(p) {
    @apply mb-4;
  }

  .markdown-content :global(ul) {
    @apply list-disc list-inside mb-4;
  }

  .markdown-content :global(li) {
    @apply mb-2;
  }
</style>
